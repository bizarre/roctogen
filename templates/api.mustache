{{>partial_header}}

use http::header::{ACCEPT, CONTENT_TYPE};
use http::request::Request;
use http::response::Response;

use std::collections::HashMap;

use crate::auth::Auth;
use crate::models::*;
use crate::adapters::{Json, RequestAdapter, RequestBuilderExt, StatusExt};

use serde_json::value::Value;

pub struct {{classname}}<'api> {
    auth: &'api Auth
}

pub fn new(auth: &Auth) -> {{classname}} {
    {{classname}} { auth }
}

{{#operations}}{{#operation}}{{#contents}}
#[derive(Debug, Deserialize)]
pub enum {{classname}}{{operationIdCamelCase}}Error {
{{#responses}}{{#vendorExtensions}}{{^x-is-default}}
    Status{{code}}{{#dataType}}({{{.}}}){{/dataType}},
{{/x-is-default}}{{/vendorExtensions}}{{/responses}}
    Generic { code: u16 },
}

impl<T> StatusExt<T> for {{classname}}{{operationIdCamelCase}}Error
    where T: std::io::Read
{
    fn resolve(
        status: http::StatusCode,
        res: &mut Response<T>,
    ) -> Result<Self, serde_json::Error> {
        match status.as_u16() {
{{#responses}}{{#vendorExtensions}}{{^x-is-default}}
            {{code}} => {
                {{#dataType}}
                let e: {{{.}}} = res.to_json()?;
                Ok({{classname}}{{operationIdCamelCase}}Error::Status{{code}}(e))
                {{/dataType}}
                {{^dataType}}
                Ok({{classname}}{{operationIdCamelCase}}Error::Status{{code}})
                {{/dataType}}
            }
{{/x-is-default}}{{/vendorExtensions}}{{/responses}}
            code => Ok({{classname}}{{operationIdCamelCase}}Error::Generic { code }),
        }
    }
}

impl std::error::Error for {{classname}}{{operationIdCamelCase}}Error {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        None
    }
}

impl std::fmt::Display for {{classname}}{{operationIdCamelCase}}Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
{{#responses}}{{#vendorExtensions}}{{^x-is-default}}
            {{classname}}{{operationIdCamelCase}}Error::Status{{code}}{{#dataType}}(_){{/dataType}} => write!(f, "{{message}}"),
{{/x-is-default}}{{/vendorExtensions}}{{/responses}}
            {{classname}}{{operationIdCamelCase}}Error::Generic{ code } => write!(f, "Status code: {}", code),
        }
    }
}

{{/contents}}{{/operation}}

{{#operation}}{{#contents}}{{#hasQueryParams}}
pub struct {{classname}}{{operationIdCamelCase}}Params {
    {{#queryParams}}
    pub {{paramName}}: {{^required}}Option<{{#isString}}String{{/isString}}{{#isUuid}}String{{/isUuid}}{{^isString}}{{^isUuid}}{{{dataType}}}{{/isUuid}}{{/isString}}>{{/required}}{{#required}}{{#isString}}String{{/isString}}{{#isUuid}}String{{/isUuid}}{{^isString}}{{^isUuid}}{{{dataType}}}{{/isUuid}}{{/isString}}{{/required}}{{#hasMore}}, {{/hasMore}}
    {{/queryParams}}
}
{{/hasQueryParams}}
{{/contents}}{{/operation}}

impl {{classname}}<'_> {
{{#operation}}{{#contents}}
    pub fn {{operationId}}(&self, {{#pathParams}}{{paramName}}: {{#nullable}}Option<{{#isString}}&str{{/isString}}{{#isUuid}}&str{{/isUuid}}{{^isString}}{{^isUuid}}{{{dataType}}}{{/isUuid}}{{/isString}}>{{/nullable}}{{^nullable}}{{#isString}}&str{{/isString}}{{#isUuid}}&str{{/isUuid}}{{^isString}}{{^isUuid}}{{{dataType}}}{{/isUuid}}{{/isString}}{{/nullable}}{{#hasMore}}, {{/hasMore}}{{/pathParams}}{{#hasQueryParams}}{{#hasPathParams}}, {{/hasPathParams}}query_params: {{classname}}{{operationIdCamelCase}}Params{{#hasBodyParam}}, {{/hasBodyParam}}{{/hasQueryParams}}{{#hasBodyParam}}{{^hasQueryParams}}{{#hasPathParams}}, {{/hasPathParams}}{{/hasQueryParams}}body: {{#bodyParam}}{{{dataType}}}{{/bodyParam}}{{/hasBodyParam}}) -> Result<impl RequestAdapter<{{#responses}}{{#vendorExtensions}}{{#x-is-default}}{{{dataType}}}{{/x-is-default}}{{/vendorExtensions}}{{/responses}}{{#vendorExtensions}}{{#x-codegen-response-empty-default}}(){{/x-codegen-response-empty-default}}{{/vendorExtensions}}, {{classname}}{{operationIdCamelCase}}Error>, http::Error> {
       env_logger::init();

       let mut builder = Request::builder();
       let request_uri = format!("{}{{path}}", super::GITHUB_BASE_API_URL{{#hasPathParams}}, {{/hasPathParams}}{{#pathParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/pathParams}});
       debug!("build request uri ({:?})", &request_uri);

       builder = builder
           .uri(request_uri)
           .header(ACCEPT, "application/vnd.github.v3+json")
           .header(CONTENT_TYPE, "application/json");

       builder = builder.authenticate(&self.auth);

       Ok(builder.body(())?)
    }

{{/contents}}{{/operation}}{{/operations}}
}
